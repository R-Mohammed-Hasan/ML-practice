{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10577320,"sourceType":"datasetVersion","datasetId":6545693}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport re\n\ndef load_codebase(directory_path):\n    \"\"\"\n    Loads all files from a directory and returns a dictionary with filenames as keys.\n    \"\"\"\n    code_files = {}\n    for root, _, files in os.walk(directory_path):\n        for file in files:\n            if file.endswith(('.rb', '.js', '.erb', '.html', '.css')):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    code_files[file_path] = f.read()\n    return code_files\n\ndef preprocess_code(file_content):\n    \"\"\"\n    Splits code into logical chunks (e.g., functions or classes) with their context.\n    \"\"\"\n    chunks = re.split(r'\\n\\s*\\n', file_content)  # Split by blank lines\n    return [chunk.strip() for chunk in chunks if chunk.strip()]\n\n# Example usage\ncodebase = load_codebase('/kaggle/input/webspire-github-repository')  # Provide the codebase directory path\npreprocessed_code = {file: preprocess_code(content) for file, content in codebase.items()}\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-25T11:32:54.403760Z","iopub.execute_input":"2025-01-25T11:32:54.404098Z","iopub.status.idle":"2025-01-25T11:32:55.350690Z","shell.execute_reply.started":"2025-01-25T11:32:54.404074Z","shell.execute_reply":"2025-01-25T11:32:55.349473Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"preprocessed_code","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T11:33:25.957749Z","iopub.execute_input":"2025-01-25T11:33:25.958131Z","iopub.status.idle":"2025-01-25T11:33:25.970272Z","shell.execute_reply.started":"2025-01-25T11:33:25.958102Z","shell.execute_reply":"2025-01-25T11:33:25.968628Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-037d4bf140e0>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpreprocessed_code\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlength\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'dict' object has no attribute 'length'"],"ename":"AttributeError","evalue":"'dict' object has no attribute 'length'","output_type":"error"}],"execution_count":8}]}